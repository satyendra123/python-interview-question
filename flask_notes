# make a simple app using flask
from flask import Flask
app= Flask(__name__)
if __name__ == '__main__':
    app.run(host='0.0.0.0',port=True, debug=True)

Note- so iska use karke hum apna simple sa ek server bana chuke hai. hum __name__ ka use karte hai kyuki hum chahte hai ki ye jb tk wait kare run hone ke liye jb tk hum __name__ ko call na kar le. humne __name__=='__main__' likha hai
      means jab hum run kare code ko to hi humara server run hona start ho. aur debug=True karne ka mtlb hai ki agar koi error aaye to hume show kar de browser me hi usi samay

app.run() = iska use hum server ko start karne ke liye karte hai
@app.use('/') = iska use hum index page me data show karne ke liye karte hai. means agar hum direct http://localhost:8000 run karenge to ye jo return karega hume ye dekhne ko milega
@app.route('/user', method=['GET']) = iska use hum karte hai taki hum us routes se data ko get yaa post kar sake. ise hi hum api url bolte hai
@app.before_request = ye jo decorator hai humara iska mtlb ki koi bhi request se pahle ye function run hoga
@app.after_request =  ye jo decorator hai humara iska mtlb ki koi bhi request ke baad ye function run hoga

EX-2 hum ek crud operation karwa rahe hai. jisme hum data ko insert karwa rahe hai, data fetch kar rhe hai sara chiz kar rhe hai
note- 
'''
note- request parameter se data lene ke liye request.args() method ka use karte hai     name = request.args.get('name'), id= request.args.get('id') ise hum multiple bar call karke usme se data nikal sakte hai lekin post me aisa nahi hota hai
name = request.args.get('name')
age = request.args.get('age')
marks = request.args.get('marks')


note- post data se data lene ke liye request.get_json() method ka use karte hai         name = request.get_json.get('name'), age = request.get_json.get('age')
agar mai aisa karta hu to ye mujhe error dega kyuki jab mai pahli bar call karunga to data mujhe de dega sara ka sara body ka... aur agar ab mai iske bad phir se get_json() karunga to wo mujhe none dega kyuki wo pahle mujhe body ka data de chuka hai

so hum kya karte hai ki ek bar me hi sara ka sara data le lete hai body ka aur usko data variable ke andar store kara lete hai aur hir us data variable me se data ko nikalte rhte hai jo sa chahiye rahta hai

data = request.get_json()
name = data.get('name')
age = data.get('age')
marks = data.get('marks')

hum dictionary ke key me se agar data nikalna chahte hai uske key se to hum get() method ka use karte hai jaise hum is example se samjhne ki kosis karte hai

data= {
    'name':"satyendra",
    'age':156,
    'marks':100
}

name = data.get('name') or we can write it like this also name = data['name']
print(name)


note- but jab hum .get('name') method se data fetch karte hai to agar dictionary me key nahi hai to bhi ye hume error nahi dega jabki agar hum directly long bracket ka use karke karte hai to agar key nahi hua data me to wo hume error dega

data= {
    'name':"satyendra",
    'age':156,
    'marks':100
}

name = data.get('fees')
print(name)

note - is case me ye hume None dega name ke andar kyuki humne get() method ka use kiya hai dictionary se data nikalne ke liye. jabki agar mai ise data['fees'] karta to mujhe error milta
'''


from flask import Flask, Response, jsonify, request
import mysql.connector

app = Flask(__name__)

def db_connection():
    try:
        conn = mysql.connector.connect(host='localhost', user='root', password='', database='denso_esd')
        if(conn.is_connected()):
            print("database is connected successfully")
        else:
            print("database is not connected successfully")
        return conn

    except mysql.connector.Error as err:
        print("error in connection", err)

@app.route('/create_table', methods=['GET'])
def create_table():
    conn = db_connection()
    if conn is None:
        return jsonify({'status':'error','msg':'database connection issue'}),500
    try:
        sql = 'CREATE TABLE student (stuid INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(20), age INT(8), marks FLOAT(5,2))'
        cursor = conn.cursor()
        cursor.execute(sql)
        conn.commit()
        cursor.close()
        return jsonify({'status':'success', 'msg':'table is created successfully'}),200
    
    except mysql.connector.Error as err:
        return jsonify({'status':'error', 'msg':f'Database Error {err}'}),500

    finally:
        conn.close()    

@app.route('/insert_data', methods=['POST'])
def insert_data():
    data = request.get_json()
    name = data.get('name')
    age = data.get('age')
    marks = data.get('marks')

    try:

        return jsonify({'status':'success', 'msg':'data inserted'}),201
    
    except:
        return jsonify({'status':'error','msg':'data is not inserted'}),500

if(__name__ == '__main__'):
    app.run(host='0.0.0.0', port=5000)
