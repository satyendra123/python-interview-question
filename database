Ex-1 database connection                                                                                  EX-2
import mysql.connector                                                                                        db_config = {'host':'localhost','user':'root','password':'','database':'esd_app'}
conn = mysql.connector.connect(host='localhost',user='root',password='',database='esd_app')                   conn = mysql.connector.connect(**db_config)
                                                                                                              Note- **db_config jo hai dictionary ko is form me karne ke liye use karte hai host='localhost',user='root',password='',database='esd_app' 
                                                                                                                
is_connected() = agar mai conn.is_connected() karu to ye mujhe true ya false dega. so isse check ho jayega. yaa phir hum try except ka use lar sakte hai isme
close() = connection ko close karne ke liye hum close() method ka use karenge

EX-3                                                                                                    EX-4 
import mysql.connector                                                                                      import mysql.connector
conn = mysql.connector.connect(host='localhost',user='root',password='',database='esd_app')                 try:
connected = conn.is_connected()                                                                                 conn = mysql.connector.connect(host='localhost',user='root',password='',database='esd_app')
if connected:                                                                                                   print("Database connection successful")
    print("connected to database")                                                                           except mysql.connector.Error as err:
else:                                                                                                           print("Error connecting to the database")
    print("Error connecting to database")

EX-5
# This script connects to a MySQL database and creates a table named 'user'.
# This script connects to a MySQL database and creates a table named 'user'.
import mysql.connector

conn = mysql.connector.connect(host='localhost', user='root', password='', database='esd_app')
print("Database connection successful")

try: 
    # sql = "create table student(id int auto_increment not null primary key, name varchar(50), email varchar(50), password varchar(50), phone varchar(50), address varchar(50))"
    # sql = "insert into student(name, email, password, phone, address) VALUES ('sandeep','satyendra@gmail.com','123456789','9584224133','jamuna colliery')"
    # sql = "delete from student where id=1"
    sql = "update student set name='satyendra' where id=4"
    cursor = conn.cursor()
    cursor.execute(sql)
    conn.commit()
    print("Table created successfully")
    print("row inserted", cursor.rowcount)
    print("last Row id", cursor.lastrowid)

except mysql.connector.Error as err:
    print(f"Error: {err}")

if conn.is_connected():
    cursor.close()
    conn.close()
    print("Database connection closed")

Note- commit() => commit method ka use hum karte hai jab hume inserted row ko database me save karne ke liye. otherwise no changes are made in the database. conn object ke through commit() method ka use karte hai
                   jab hum table me kuch modification karte hai tb hume iski jarurat padhti hai. agar database se kewal data ko fetch karna hai kuch modification nahi karna hai to 
                   hume commit() ka use nahi karna padhega

fetchone() method= fetchone() hume first row fetch karke deta hai. fetchone() will automatically go to the next row means if i call the fetchone() again then it gives me the next row data
# This script connects to a MySQL database and creates a table named 'user'. 
#EX-1 fetch only one data from the database                                                               #EX-2 
import mysql.connector                                                                                          import mysql.connector
conn = mysql.connector.connect(host='localhost', user='root', password='', database='esd_app')                  conn = mysql.connector.connect(host='localhost', user='root', password='', database='esd_app')
print("Database connection successful")                                                                         print("Database connection successful")
try:                                                                                                            try: 
    sql = "select * from student"                                                                                   sql = "select * from student"
    cursor = conn.cursor()                                                                                          cursor = conn.cursor()
    cursor.execute(sql)                                                                                             cursor.execute(sql)
    row= cursor.fetchone()                                                                                          row= cursor.fetchone()
    print(row)                                                                                                      while row is not None:
    if conn.is_connected():                                                                                         print(row)
        cursor.close()                                                                                              row= cursor.fetchone()
        conn.close()                                                                                                if conn.is_connected():
        print("Database connection closed")
except mysql.connector.Error as err:
    print(f"Error: {err}")



3) using the flask
'''
note- request parameter se data lene ke liye request.args() method ka use karte hai     name = request.args.get('name'), id= request.args.get('id') ise hum multiple bar call karke usme se data nikal sakte hai lekin post me aisa nahi hota hai
name = request.args.get('name')
age = request.args.get('age')
marks = request.args.get('marks')


note- post data se data lene ke liye request.get_json() method ka use karte hai         name = request.get_json.get('name'), age = request.get_json.get('age')
agar mai aisa karta hu to ye mujhe error dega kyuki jab mai pahli bar call karunga to data mujhe de dega sara ka sara body ka... aur agar ab mai iske bad phir se get_json() karunga to wo mujhe none dega kyuki wo pahle mujhe body ka data de chuka hai

so hum kya karte hai ki ek bar me hi sara ka sara data le lete hai body ka aur usko data variable ke andar store kara lete hai aur hir us data variable me se data ko nikalte rhte hai jo sa chahiye rahta hai

data = request.get_json()
name = data.get('name')
age = data.get('age')
marks = data.get('marks')

hum dictionary ke key me se agar data nikalna chahte hai uske key se to hum get() method ka use karte hai jaise hum is example se samjhne ki kosis karte hai

data= {
    'name':"satyendra",
    'age':156,
    'marks':100
}

name = data.get('name') or we can write it like this also name = data['name']
print(name)


note- but jab hum .get('name') method se data fetch karte hai to agar dictionary me key nahi hai to bhi ye hume error nahi dega jabki agar hum directly long bracket ka use karke karte hai to agar key nahi hua data me to wo hume error dega

data= {
    'name':"satyendra",
    'age':156,
    'marks':100
}

name = data.get('fees')
print(name)

note - is case me ye hume None dega name ke andar kyuki humne get() method ka use kiya hai dictionary se data nikalne ke liye. jabki agar mai ise data['fees'] karta to mujhe error milta



2) what is the difference between the Response and the jsonify
(i) jsonify- in the jsonify it is automatically do everything by its own we don't need to write it by ourself like ye python ke dictionary or list ko automatically convert kar deta hai json format me, headers ko bhi apne se set kar deta hai

data = {'status': 'success', 'message': 'This is a JSON response'}
    return jsonify(data), 200

(ii) Response - Response me hume sara chiz khud se karna padta hai. means jaise json format me data send karna hai to hume json.dumps() ka use karna padega apne ditionary or list ko json format me send karne ke liye
data = {'status': 'success', 'message': 'Manual JSON'}
    response = Response(response=json.dumps(data),status=200, mimetype='application/json')
'''


from flask import Flask, Response, jsonify, request
import json
import mysql.connector

app = Flask(__name__)

def db_connection():
    try:
        conn = mysql.connector.connect(host='localhost', user='root', password='', database='denso_esd')
        if(conn.is_connected()):
            print("database is connected successfully")
        else:
            print("database is not connected successfully")
        return conn

    except mysql.connector.Error as err:
        print("error in connection", err)

@app.route('/create_table', methods=['GET'])
def create_table():
    conn = db_connection()
    if conn is None:
        return jsonify({'status':'error','msg':'database connection issue'}),500
    try:
        sql = 'CREATE TABLE student (stuid INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(20), age INT(8), marks FLOAT(5,2))'
        cursor = conn.cursor()
        cursor.execute(sql)
        conn.commit()
        cursor.close()
        return jsonify({'status':'success', 'msg':'table is created successfully'}),200
    
    except mysql.connector.Error as err:
        return jsonify({'status':'error', 'msg':f'Database Error {err}'}),500

    finally:
        conn.close()    

@app.route('/insert_data', methods=['POST'])
def insert_data():
    data = request.get_json()
    name = data.get('name')
    age = data.get('age')
    marks = data.get('marks')

    try:

        return jsonify({'status':'success', 'msg':'data inserted'}),201
    
    except:
        return jsonify({'status':'error','msg':'data is not inserted'}),500

if(__name__ == '__main__'):
    app.run(host='0.0.0.0', port=5000)


